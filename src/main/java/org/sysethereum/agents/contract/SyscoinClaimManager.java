package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class SyscoinClaimManager extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b5060405160c080613a4f83398101604090815281516020830151918301516060840151608085015160a09095015160028054600160a060020a03958616600160a060020a03199182161790915560038054959096169416939093179093556006556007919091556004919091556005556139c08061008f6000396000f3006080604052600436106101be5763ffffffff60e060020a600035041663032e558781146101c9578063040aa57a146102315780630ac0d9c9146102605780630d5f5d691461027857806313be4f9e1461029057806318b011de146102a857806327b425a6146102cf57806329118a9b146102e4578063329af83f1461030857806333289a46146103395780633352f1a41461035157806340732c891461036957806343207e6314610371578063455e6166146103895780634955d0851461039e57806355e4286b146103b357806357872488146103e45780635bf7d5db146103f957806361bd8d66146104115780636ca640a114610426578063748a00e21461043b57806390a14aea1461046a57806390b6f6991461047f5780639c57588f146104945780639e84477d146104b85780639eee4d44146104cd578063a8b4633f14610504578063ba16d6001461051c578063bf0e1edb14610531578063c2569e5a14610549578063c3d3290f14610570578063c44205e314610588578063d035c403146105a0578063dac1d764146105b5578063e1254fba146105cd578063eda1970b146105ee578063eff0f59214610603578063fc7e286d1461066a575b6101c661068b565b50005b3480156101d557600080fd5b506101e16004356106ac565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561021d578181015183820152602001610205565b505050509050019250505060405180910390f35b34801561023d57600080fd5b5061024c60043560243561071e565b604080519115158252519081900360200190f35b34801561026c57600080fd5b5061024c600435610f88565b34801561028457600080fd5b5061024c600435611073565b34801561029c57600080fd5b5061024c60043561108b565b3480156102b457600080fd5b506102bd611657565b60408051918252519081900360200190f35b3480156102db57600080fd5b506102bd61165d565b3480156102f057600080fd5b506102bd600435600160a060020a0360243516611663565b34801561031457600080fd5b5061031d611778565b60408051600160a060020a039092168252519081900360200190f35b34801561034557600080fd5b506102bd600435611787565b34801561035d57600080fd5b5061024c600435611852565b6102bd61068b565b34801561037d57600080fd5b506102bd600435611e7a565b34801561039557600080fd5b506102bd611e97565b3480156103aa57600080fd5b506102bd611ea3565b3480156103bf57600080fd5b506103cb600435611ea9565b6040805192835260208301919091528051918290030190f35b3480156103f057600080fd5b506102bd6122a1565b34801561040557600080fd5b5061031d6004356122a7565b34801561041d57600080fd5b506102bd6122c6565b34801561043257600080fd5b506102bd6122cd565b34801561044757600080fd5b50610468600435602435600160a060020a03604435811690606435166122d9565b005b34801561047657600080fd5b5061031d61249c565b34801561048b57600080fd5b506102bd6124ab565b3480156104a057600080fd5b506102bd600435600160a060020a03602435166124b2565b3480156104c457600080fd5b506102bd6124de565b3480156104d957600080fd5b506103cb60043560243560443560643560843563ffffffff60a43581169060c4359060e435166124e4565b34801561051057600080fd5b5061024c600435612b6e565b34801561052857600080fd5b506102bd612c58565b34801561053d57600080fd5b506102bd600435612c64565b34801561055557600080fd5b506103cb600435600160a060020a0360243516604435612c79565b34801561057c57600080fd5b506102bd600435612ec9565b34801561059457600080fd5b5061024c600435612ede565b3480156105ac57600080fd5b506102bd612efb565b3480156105c157600080fd5b5061024c600435612f02565b3480156105d957600080fd5b506102bd600160a060020a0360043516612f20565b3480156105fa57600080fd5b506102bd612f3b565b34801561060f57600080fd5b5061061b600435612f41565b60408051988952600160a060020a0390971660208901528787019590955260608701939093526080860191909152151560a0850152151560c0840152151560e083015251908190036101000190f35b34801561067657600080fd5b506102bd600160a060020a0360043516612f97565b60006106973334612fa9565b50336000908152602081905260409020545b90565b600081815260016020908152604091829020600381018054845181850281018501909552808552606094929383018282801561071157602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116106f3575b5050505050915050919050565b60008181526001602081905260408220829190849083806060815b858b146109cb576040805161012081018252865481526001870154600160a060020a031660208083019190915260028801548284015260038801805484518184028101840190955280855261081c948a9360608601939192908301828280156107cb57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116107ad575b5050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b151561085557604080518c815261c3a060208201528151600080516020613975833981519152929181900390910190a160009850610f7a565b6002546040805160e160020a6365702c0f028152600481018990529051600392600160a060020a03169163cae0581e9160248083019260209291908290030181600087803b1580156108a657600080fd5b505af11580156108ba573d6000803e3d6000fd5b505050506040513d60208110156108d057600080fd5b505160058111156108dd57fe5b1461091557604080518c815261c36460208201528151600080516020613975833981519152929181900390910190a160009850610f7a565b868015610926575060038501546000105b1561093057600096505b6002546040805160e160020a632af00c67028152600481018990529051600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b15801561098157600080fd5b505af1158015610995573d6000803e3d6000fd5b505050506040513d60208110156109ab57600080fd5b505160008181526001602081905260409091209901989096509450610739565b600454881015610a0857604080518c815261c3dc60208201528151600080516020613975833981519152929181900390910190a160009850610f7a565b6002546040805160e160020a6365702c0f028152600481018990529051600392600160a060020a03169163cae0581e9160248083019260209291908290030181600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d6020811015610a8357600080fd5b50516005811115610a9057fe5b14610ac857604080518c815261c36460208201528151600080516020613975833981519152929181900390910190a160009850610f7a565b6002546040805160e160020a632af00c67028152600481018e90529051600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b158015610b1957600080fd5b505af1158015610b2d573d6000803e3d6000fd5b505050506040513d6020811015610b4357600080fd5b5051935060046002546040805160e160020a6365702c0f028152600481018890529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b158015610b9a57600080fd5b505af1158015610bae573d6000803e3d6000fd5b505050506040513d6020811015610bc457600080fd5b50516005811115610bd157fe5b14610c0957604080518c815261c36460208201528151600080516020613975833981519152929181900390910190a160009850610f7a565b600254604080517f95b45ee7000000000000000000000000000000000000000000000000000000008152600481018e90523360248201528151600160a060020a03909316926395b45ee7926044808401939192918290030181600087803b158015610c7357600080fd5b505af1158015610c87573d6000803e3d6000fd5b505050506040513d6040811015610c9d57600080fd5b505192508215610cd957604080518c8152602081018590528151600080516020613975833981519152929181900390910190a160009850610f7a565b6001850154604080518d8152600160a060020a03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1610d2b8b86613054565b6001850154610d44908c90600160a060020a0316613112565b50508615610f755787604051908082528060200260200182016040528015610d76578160200160208202803883390190505b509150899550600090505b858b14610e2657858282815181101515610d9757fe5b60209081029091018101919091526002546040805160e160020a632af00c67028152600481018a90529051600160a060020a03909216926355e018ce926024808401938290030181600087803b158015610df057600080fd5b505af1158015610e04573d6000803e3d6000fd5b505050506040513d6020811015610e1a57600080fd5b50519550600101610d81565b6000811115610f75576001810390508181815181101515610e4357fe5b602090810290910181015160008181526001909252604080832060025482517f95b45ee7000000000000000000000000000000000000000000000000000000008152600481018590523360248201528351949b50919950600160a060020a0316936395b45ee793604480840194939192918390030190829087803b158015610eca57600080fd5b505af1158015610ede573d6000803e3d6000fd5b505050506040513d6040811015610ef457600080fd5b505192508215610f0357600080fd5b600185015460408051888152600160a060020a03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1610f558686613054565b6001850154610f6e908790600160a060020a0316613112565b5050610e26565b600198505b505050505050505092915050565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a03168484015260028101548483015260038101805483518186028101860190945280845261106d959492936060860193909291908301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b92915050565b60009081526001602052604090206008015460ff1690565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a0316848401526002810154848301526003810180548351818602810186019094528084529194869485948594611175948993606086019392908301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b15156111ae576040805187815261c3a060208201528151600080516020613975833981519152929181900390910190a16000945061164e565b600254604080517f2e400191000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a0390921691632e400191916024808201926020929091908290030181600087803b15801561121557600080fd5b505af1158015611229573d6000803e3d6000fd5b505050506040513d602081101561123f57600080fd5b5051600254604080517ff06d520d000000000000000000000000000000000000000000000000000000008152905163ffffffff9093169550600160a060020a039091169163f06d520d916004808201926020929091908290030181600087803b1580156112ab57600080fd5b505af11580156112bf573d6000803e3d6000fd5b505050506040513d60208110156112d557600080fd5b505160048054600254604080517f2e4001910000000000000000000000000000000000000000000000000000000081529384018590525193955090860192600160a060020a0390911691632e4001919160248083019260209291908290030181600087803b15801561134657600080fd5b505af115801561135a573d6000803e3d6000fd5b505050506040513d602081101561137057600080fd5b505163ffffffff1610156113b1576040805187815261c3dc60208201528151600080516020613975833981519152929181900390910190a16000945061164e565b600254604080517fc0dde98b000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163c0dde98b916024808201926020929091908290030181600087803b15801561141857600080fd5b505af115801561142c573d6000803e3d6000fd5b505050506040513d602081101561144257600080fd5b50519150858214611649576002546040805160e160020a6365702c0f028152600481018990529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b15801561149e57600080fd5b505af11580156114b2573d6000803e3d6000fd5b505050506040513d60208110156114c857600080fd5b5051905060038160058111156114da57fe5b14611512576040805187815261c36460208201528151600080516020613975833981519152929181900390910190a16000945061164e565b6008840154610100900460ff161515611558576040805187815261c3b460208201528151600080516020613975833981519152929181900390910190a16000945061164e565b600254604080517f74205786000000000000000000000000000000000000000000000000000000008152600481018990523360248201528151600160a060020a03909316926374205786926044808401939192918290030181600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b505050506040513d60408110156115ec57600080fd5b5050600184015460408051888152600160a060020a03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a161164086856132d6565b6001945061164e565b600094505b50505050919050565b60075481565b60045481565b60008281526001602081815260408084208151610120810183528154815293810154600160a060020a03168484015260028101548483015260038101805483518186028101860190945280845291946117499490938693606086019391928301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b151561175457600080fd5b600160a060020a038316600090815260048201602052604090205491505092915050565b600354600160a060020a031681565b336000908152602081905260408120548211156117a357600080fd5b336000908152602081905260409020546117c3908363ffffffff61354e16565b33600081815260208190526040808220939093559151909184156108fc02918591818181858888f19350505050158015611801573d6000803e3d6000fd5b50604080513381526020810184905281517f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e929181900390910190a150503360009081526020819052604090205490565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a031684840152600281015484830152600381018054835181860281018601909452808452919486948594859461193c948993606086019392908301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b1515611975576040805187815261c3a060208201528151600080516020613975833981519152929181900390910190a16000945061164e565b600884015460ff16156119b5576040805187815261c3aa60208201528151600080516020613975833981519152929181900390910190a16000945061164e565b600884015462010000900460ff1615611acc5760088401805461ff0019166101001790556002548454604080517f7420578600000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a039093169263742057869260448082019392918290030181600087803b158015611a4557600080fd5b505af1158015611a59573d6000803e3d6000fd5b505050506040513d6040811015611a6f57600080fd5b5050600184015460408051888152600160a060020a03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a1611ac386856132d6565b6000945061164e565b60078401544211611b0a576040805187815261c36e60208201528151600080516020613975833981519152929181900390910190a16000945061164e565b600384015460058501541015611b4d576040805187815261c3aa60208201528151600080516020613975833981519152929181900390910190a16000945061164e565b60088401805461ff0019166101001790556003840154600093501515611c875760025484546040805160e160020a632af00c67028152600481019290925251600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b158015611bc057600080fd5b505af1158015611bd4573d6000803e3d6000fd5b505050506040513d6020811015611bea57600080fd5b50516002546040805160e160020a6365702c0f028152600481018490529051929450600160a060020a039091169163cae0581e916024808201926020929091908290030181600087803b158015611c4057600080fd5b505af1158015611c54573d6000803e3d6000fd5b505050506040513d6020811015611c6a57600080fd5b505190506004816005811115611c7c57fe5b1415611c8757600192505b8215611d8d576002548454604080517f95b45ee700000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a03909316926395b45ee79260448082019392918290030181600087803b158015611cf957600080fd5b505af1158015611d0d573d6000803e3d6000fd5b505050506040513d6040811015611d2357600080fd5b50506001840154611d3e908790600160a060020a0316613112565b5050600184015460408051888152600160a060020a03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1611e6e565b6002548454604080517f27426f7500000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a03909316926327426f759260448082019392918290030181600087803b158015611df957600080fd5b505af1158015611e0d573d6000803e3d6000fd5b505050506040513d6040811015611e2357600080fd5b5050600184015460408051888152600160a060020a03909216602083015280517f68c34be3e9c7221898bee267017dda5f7344326a8825b2d4427dfeaba0fa19299281900390910190a15b50600195945050505050565b600090815260016020526040902060058101546003909101540390565b670de0b6b3a76484d081565b619c4081565b600254600090819081908190600160a060020a03161515611ec957600080fd5b6000858152600160208181526040928390208351610120810185528154815292810154600160a060020a031683830152600281015483850152600381018054855181850281018501909652808652919650611fb19487936060860193919291908301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b1515611fee576040805186815261c3a060208201528151600080516020613975833981519152929181900390910190a161c3a0859350935061229a565b6008820154610100900460ff1615612037576040805186815261c3b460208201528151600080516020613975833981519152929181900390910190a161c3b4859350935061229a565b33600090815260208190526040902054670de0b6b3a76ab6c0111561208d576040805186815261c38c60208201528151600080516020613975833981519152929181900390910190a161c38c859350935061229a565b600254604080517fc1f67ab3000000000000000000000000000000000000000000000000000000008152600481018890523360248201528151600160a060020a039093169263c1f67ab3926044808401939192918290030181600087803b1580156120f757600080fd5b505af115801561210b573d6000803e3d6000fd5b505050506040513d604081101561212157600080fd5b5051905080156121605760408051868152602081018390528151600080516020613975833981519152929181900390910190a19250600091508261229a565b600554604080517fc2569e5a0000000000000000000000000000000000000000000000000000000081526004810188905233602482015260448101929092528051309263c2569e5a9260648083019391928290030181600087803b1580156121c757600080fd5b505af11580156121db573d6000803e3d6000fd5b505050506040513d60408110156121f157600080fd5b5051905080156121fd57fe5b60078054420190830155600382018054600181018255600091825260209182902001805473ffffffffffffffffffffffffffffffffffffffff191633908117909155604080518881529283019190915280517f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e49281900390910190a1600882015460ff1615156122925761229085613560565b505b600085935093505b5050915091565b60065481565b60009081526001602081905260409091200154600160a060020a031690565b6206b6c081565b670de0b6b3a76ab6c081565b600354600090600160a060020a031633146122f357600080fd5b506000838152600160208181526040928390208351610120810185528154815292810154600160a060020a03168383015260028101548385015260038101805485518185028101850190965280865291946123d9949386936060860193918301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b15156123e457600080fd5b60088101805460ff191690556001810154600160a060020a03838116911614156124205760088101805462ff000019166201000017905561244c565b6001810154600160a060020a03848116911614156124475761244184613560565b5061244c565b600080fd5b60408051868152600160a060020a03808616602083015284168183015290517f1a6e323d263407d13632ff217899ae9353a07223d311df6db8d80cad6a57c2d59181900360600190a15050505050565b600254600160a060020a031681565b6205c49081565b6000828152600160209081526040808320600160a060020a038516845260060190915290205492915050565b60055481565b60025460009081908190819081908190600160a060020a0316151561250857600080fd5b33600090815260208190526040902054670de0b6b3a76484d0111561256057604080516000815261c38c60208201528151600080516020613975833981519152929181900390910190a161c38c955060009450612b5d565b426006548d0111156125a557604080516000815261c37360208201528151600080516020613975833981519152929181900390910190a161c373955060009450612b5d565b600260009054906101000a9004600160a060020a0316600160a060020a031663e52a9a478f8f8f8f8f8f8f8f336040518a63ffffffff1660e060020a028152600401808a6000191660001916815260200189815260200188815260200187815260200186600019166000191681526020018563ffffffff1663ffffffff16815260200184600019166000191681526020018363ffffffff1663ffffffff16815260200182600160a060020a0316600160a060020a0316815260200199505050505050505050506040805180830381600087803b15801561268457600080fd5b505af1158015612698573d6000803e3d6000fd5b505050506040513d60408110156126ae57600080fd5b508051602090910151909450925083156126f65760408051848152602081018690528151600080516020613975833981519152929181900390910190a1838395509550612b5d565b6000838152600160208181526040928390208351610120810185528154815292810154600160a060020a0316838301526002810154838501526003810180548551818502810185019096528086529196506127de9487936060860193919291908301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b15612a2257600882015462010000900460ff16801561280657506008820154610100900460ff165b801561281f57506001820154600160a060020a03163314155b905080156129e45760046002546040805160e160020a6365702c0f028152600481018c90529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b15801561287a57600080fd5b505af115801561288e573d6000803e3d6000fd5b505050506040513d60208110156128a457600080fd5b505160058111156128b157fe5b141561294a57600254604080517ff06d520d00000000000000000000000000000000000000000000000000000000815290518a92600160a060020a03169163f06d520d9160048083019260209291908290030181600087803b15801561291657600080fd5b505af115801561292a573d6000803e3d6000fd5b505050506040513d602081101561294057600080fd5b50511490506129e4565b6002546040805160e160020a6365702c0f028152600481018b90529051600392600160a060020a03169163cae0581e9160248083019260209291908290030181600087803b15801561299b57600080fd5b505af11580156129af573d6000803e3d6000fd5b505050506040513d60208110156129c557600080fd5b505160058111156129d257fe5b14156129e0575060016129e4565b5060005b801515612a22576040805184815261c3a060208201528151600080516020613975833981519152929181900390910190a161c3a08395509550612b5d565b82825560018201805473ffffffffffffffffffffffffffffffffffffffff19163317905560006005830181905560088301805462ffffff1916905542600284018190556007805490910190840155612a7d600384018261392d565b50600554604080517fc2569e5a0000000000000000000000000000000000000000000000000000000081526004810186905233602482015260448101929092528051309263c2569e5a9260648083019391928290030181600087803b158015612ae557600080fd5b505af1158015612af9573d6000803e3d6000fd5b505050506040513d6040811015612b0f57600080fd5b505193508315612b1b57fe5b6040805184815233602082015281517fb3a62becdc21cd20cda5d5537311e57b217d497022fa1d6fa233fe5d736011ad929181900390910190a1600083955095505b505050509850989650505050505050565b6000818152600160205260408120600280546040805160e160020a6365702c0f028152600481018790529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b158015612bce57600080fd5b505af1158015612be2573d6000803e3d6000fd5b505050506040513d6020811015612bf857600080fd5b50516005811115612c0557fe5b148015612c1d5750600881015462010000900460ff16155b8015612c2e5750600881015460ff16155b8015612c3d5750806007015442115b8015612c5157506003810154600582015410155b9392505050565b670de0b6b3a764000081565b60009081526001602052604090206007015490565b60035460009081908190600160a060020a0316331480612c9857503330145b1515612ca357600080fd5b506000858152600160208181526040928390208351610120810185528154815292810154600160a060020a0316838301526002810154838501526003810180548551818502810185019096528086529194612d89949386936060860193918301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b1515612d9d5761c3a0925060009150612ec0565b600160a060020a038516600090815260208190526040902054841115612de257600160a060020a03851660009081526020819052604090205461c38c93509150612ec0565b600160a060020a038516600090815260208190526040902054612e0b908563ffffffff61354e16565b600160a060020a038616600090815260208181526040808320939093556004840190522054612e40908563ffffffff6138e216565b600160a060020a038616600081815260048401602090815260409182902093909355805189815292830191909152818101869052517ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb319181900360600190a1600160a060020a038516600090815260048201602052604081205490935091505b50935093915050565b60009081526001602052604090206002015490565b600090815260016020526040902060080154610100900460ff1690565b62035b6081565b60009081526001602052604090206008015462010000900460ff1690565b600160a060020a031660009081526020819052604090205490565b6184d081565b6001602081905260009182526040909120805491810154600282015460058301546007840154600890940154600160a060020a0390931693919290919060ff808216916101008104821691620100009091041688565b60006020819052908152604090205481565b600160a060020a038216600090815260208190526040902054612fd2908263ffffffff6138e216565b600160a060020a038316600090815260208190526040902081905530311015612ffa57600080fd5b60408051600160a060020a03841681526020810183905281517fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb929181900390910190a15050565b60200151600160a060020a0316151590565b600080805b60038401548110156130f0576003840180548290811061307557fe5b6000918252602080832090910154600160a060020a0390811680845260048801909252604080842080549085905560018901549092168452909220549094509092506130c7908363ffffffff6138e216565b600180860154600160a060020a0316600090815260048701602052604090209190915501613059565b6001840154613109908690600160a060020a0316613112565b50505050505050565b60008281526001602081815260408084208151610120810183528154815293810154600160a060020a0316848401526002810154848301526003810180548351818602810186019094528084528695929486946131f99493879360608601938301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b151561320d5761c3a09350600092506132cd565b6008820154610100900460ff16151561322e5761c3649350600092506132cd565b50600160a060020a03841660009081526004820160209081526040808320805490849055918390529091205461326a908263ffffffff6138e216565b600160a060020a0386166000818152602081815260409182902093909355805189815292830191909152818101839052517faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca01298739181900360600190a1600081935093505b50509250929050565b6001810154600160a060020a03166000908152600482016020526040812080549082905590808080805b866005015484101561336557613358876004016000896003018781548110151561332657fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054869063ffffffff6138e216565b9450836001019350613300565b600091508415801561337b575060008760050154115b1561339957600587015461339690879063ffffffff6138ef16565b91505b600093505b866005015484101561346d5760038701805460009350859081106133be57fe5b6000918252602082200154600160a060020a0316935085111561341c57600160a060020a038316600090815260048801602052604090205461341990869061340d90899063ffffffff61390416565b9063ffffffff6138ef16565b91505b600160a060020a0383166000908152600488016020526040902054613447908363ffffffff6138e216565b600160a060020a038416600090815260048901602052604090205560019093019261339e565b600093505b6003870154841015613544576003870180548590811061348e57fe5b6000918252602080832090910154600160a060020a031680835260048a018252604080842054928490529092205491945091506134d1908263ffffffff6138e216565b600160a060020a0384166000818152602081815260408083209490945560048b0181528382209190915582518b81529081019190915280820183905290517faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca01298739181900360600190a1836001019350613472565b5050505050505050565b60008282111561355a57fe5b50900390565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a0316848401526002810154848301526003810180548351818602810186019094528084529194869461364a94919387936060860193929091908301828280156107cb57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107ad575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613042565b1515613683576040805185815261c3a060208201528151600080516020613975833981519152929181900390910190a1600092506138db565b6008820154610100900460ff16806136a55750600882015462010000900460ff165b156136dd576040805185815261c3b460208201528151600080516020613975833981519152929181900390910190a1600092506138db565b600882015460ff161561371d576040805185815261c3aa60208201528151600080516020613975833981519152929181900390910190a1600092506138db565b6003820154600583015410156138d65760038054600184015460058501549285018054600160a060020a039384169463d1daeede948a94169291811061375f57fe5b60009182526020808320909101546040805160e060020a63ffffffff89160281526004810196909652600160a060020a0394851660248701529316604485015291516064808501949192918390030190829087803b1580156137c057600080fd5b505af11580156137d4573d6000803e3d6000fd5b505050506040513d60208110156137ea57600080fd5b505160058301546003840180549293508392600686019260009291811061380d57fe5b6000918252602080832090910154600160a060020a039081168452908301939093526040909101902091909155600183015460058401546003850180547f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f849948994169290811061387957fe5b6000918252602091829020015460408051948552600160a060020a0393841692850192909252919091168282015260608201849052519081900360800190a160088201805460ff1916600190811790915560058301805490910190555b600192505b5050919050565b8181018281101561106d57fe5b600081838115156138fc57fe5b049392505050565b60008215156139155750600061106d565b5081810281838281151561392557fe5b041461106d57fe5b81548183558181111561395157600083815260209020613951918101908301613956565b505050565b6106a991905b80821115613970576000815560010161395c565b5090560094bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33a165627a7a723058200a92410d146bcb5f87b22915d67c763f44320658ecf6d4caa6049bc5f724e53b0029";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_SUPERBLOCKCONFIRMATIONS = "superblockConfirmations";

    public static final String FUNC_TRUSTEDSYSCOINBATTLEMANAGER = "trustedSyscoinBattleManager";

    public static final String FUNC_WITHDRAWDEPOSIT = "withdrawDeposit";

    public static final String FUNC_MAKEDEPOSIT = "makeDeposit";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_RESPONDBLOCKHEADERCOST = "respondBlockHeaderCost";

    public static final String FUNC_SUPERBLOCKDELAY = "superblockDelay";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_TRUSTEDSUPERBLOCKS = "trustedSuperblocks";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_BATTLEREWARD = "battleReward";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_CLAIMS = "claims";

    public static final String FUNC_DEPOSITS = "deposits";

    public static final String FUNC_BONDDEPOSIT = "bondDeposit";

    public static final String FUNC_GETBONDEDDEPOSIT = "getBondedDeposit";

    public static final String FUNC_GETDEPOSIT = "getDeposit";

    public static final String FUNC_PROPOSESUPERBLOCK = "proposeSuperblock";

    public static final String FUNC_CHALLENGESUPERBLOCK = "challengeSuperblock";

    public static final String FUNC_CHECKCLAIMFINISHED = "checkClaimFinished";

    public static final String FUNC_CONFIRMCLAIM = "confirmClaim";

    public static final String FUNC_REJECTCLAIM = "rejectClaim";

    public static final String FUNC_SESSIONDECIDED = "sessionDecided";

    public static final String FUNC_GETINBATTLEANDSEMIAPPROVABLE = "getInBattleAndSemiApprovable";

    public static final String FUNC_GETCLAIMSUBMITTER = "getClaimSubmitter";

    public static final String FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP = "getNewSuperblockEventTimestamp";

    public static final String FUNC_GETCLAIMEXISTS = "getClaimExists";

    public static final String FUNC_GETCLAIMDECIDED = "getClaimDecided";

    public static final String FUNC_GETCLAIMINVALID = "getClaimInvalid";

    public static final String FUNC_GETCLAIMVERIFICATIONONGOING = "getClaimVerificationOngoing";

    public static final String FUNC_GETCLAIMCHALLENGETIMEOUT = "getClaimChallengeTimeout";

    public static final String FUNC_GETCLAIMREMAININGCHALLENGERS = "getClaimRemainingChallengers";

    public static final String FUNC_GETSESSION = "getSession";

    public static final String FUNC_GETCLAIMCHALLENGERS = "getClaimChallengers";

    public static final Event DEPOSITBONDED_EVENT = new Event("DepositBonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITUNBONDED_EVENT = new Event("DepositUnbonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCREATED_EVENT = new Event("SuperblockClaimCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCHALLENGED_EVENT = new Event("SuperblockClaimChallenged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKBATTLEDECIDED_EVENT = new Event("SuperblockBattleDecided", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMSUCCESSFUL_EVENT = new Event("SuperblockClaimSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMPENDING_EVENT = new Event("SuperblockClaimPending", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMFAILED_EVENT = new Event("SuperblockClaimFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event VERIFICATIONGAMESTARTED_EVENT = new Event("VerificationGameStarted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ERRORCLAIM_EVENT = new Event("ErrorClaim", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITMADE_EVENT = new Event("DepositMade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITWITHDRAWN_EVENT = new Event("DepositWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x6bd68a1c8416f5eb3c741a63e4e66b5640e66b8e");
    }

    @Deprecated
    protected SyscoinClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinClaimManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Uint256> superblockTimeout() {
        final Function function = new Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockConfirmations() {
        final Function function = new Function(FUNC_SUPERBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> trustedSyscoinBattleManager() {
        final Function function = new Function(FUNC_TRUSTEDSYSCOINBATTLEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> withdrawDeposit(Uint256 amount) {
        final Function function = new Function(
                FUNC_WITHDRAWDEPOSIT, 
                Arrays.<Type>asList(amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MAKEDEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondBlockHeaderCost() {
        final Function function = new Function(FUNC_RESPONDBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockDelay() {
        final Function function = new Function(FUNC_SUPERBLOCKDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> trustedSuperblocks() {
        final Function function = new Function(FUNC_TRUSTEDSUPERBLOCKS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> battleReward() {
        final Function function = new Function(FUNC_BATTLEREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>> claims(Bytes32 param0) {
        final Function function = new Function(FUNC_CLAIMS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>>(
                new Callable<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>>() {
                    @Override
                    public Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>(
                                (Bytes32) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint256) results.get(4), 
                                (Bool) results.get(5), 
                                (Bool) results.get(6), 
                                (Bool) results.get(7));
                    }
                });
    }

    public RemoteCall<Uint256> deposits(Address param0) {
        final Function function = new Function(FUNC_DEPOSITS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITBONDED_EVENT, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITBONDED_EVENT, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITBONDED_EVENT));
        return depositBondedEventFlowable(filter);
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITUNBONDED_EVENT));
        return depositUnbondedEventFlowable(filter);
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCREATED_EVENT));
        return superblockClaimCreatedEventFlowable(filter);
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCHALLENGED_EVENT));
        return superblockClaimChallengedEventFlowable(filter);
    }

    public List<SuperblockBattleDecidedEventResponse> getSuperblockBattleDecidedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, transactionReceipt);
        ArrayList<SuperblockBattleDecidedEventResponse> responses = new ArrayList<SuperblockBattleDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockBattleDecidedEventResponse>() {
            @Override
            public SuperblockBattleDecidedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, log);
                SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKBATTLEDECIDED_EVENT));
        return superblockBattleDecidedEventFlowable(filter);
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMSUCCESSFUL_EVENT));
        return superblockClaimSuccessfulEventFlowable(filter);
    }

    public List<SuperblockClaimPendingEventResponse> getSuperblockClaimPendingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimPendingEventResponse> responses = new ArrayList<SuperblockClaimPendingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimPendingEventResponse>() {
            @Override
            public SuperblockClaimPendingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, log);
                SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMPENDING_EVENT));
        return superblockClaimPendingEventFlowable(filter);
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMFAILED_EVENT));
        return superblockClaimFailedEventFlowable(filter);
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFICATIONGAMESTARTED_EVENT));
        return verificationGameStartedEventFlowable(filter);
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORCLAIM_EVENT, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORCLAIM_EVENT, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORCLAIM_EVENT));
        return errorClaimEventFlowable(filter);
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITMADE_EVENT, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITMADE_EVENT, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITMADE_EVENT));
        return depositMadeEventFlowable(filter);
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITWITHDRAWN_EVENT));
        return depositWithdrawnEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> bondDeposit(Bytes32 superblockHash, Address account, Uint256 amount) {
        final Function function = new Function(
                FUNC_BONDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account, amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> getBondedDeposit(Bytes32 superblockHash, Address account) {
        final Function function = new Function(FUNC_GETBONDEDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getDeposit(Address account) {
        final Function function = new Function(FUNC_GETDEPOSIT, 
                Arrays.<Type>asList(account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> proposeSuperblock(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _prevTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentHash, Uint32 _blockHeight) {
        final Function function = new Function(
                FUNC_PROPOSESUPERBLOCK, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _prevTimestamp, _lastHash, _lastBits, _parentHash, _blockHeight), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHALLENGESUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkClaimFinished(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHECKCLAIMFINISHED, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirmClaim(Bytes32 superblockHash, Bytes32 descendantId) {
        final Function function = new Function(
                FUNC_CONFIRMCLAIM, 
                Arrays.<Type>asList(superblockHash, descendantId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rejectClaim(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_REJECTCLAIM, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sessionDecided(Bytes32 sessionId, Bytes32 superblockHash, Address winner, Address loser) {
        final Function function = new Function(
                FUNC_SESSIONDECIDED, 
                Arrays.<Type>asList(sessionId, superblockHash, winner, loser), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> getInBattleAndSemiApprovable(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETINBATTLEANDSEMIAPPROVABLE, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> getClaimSubmitter(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMSUBMITTER, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getNewSuperblockEventTimestamp(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimExists(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMEXISTS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimDecided(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMDECIDED, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimInvalid(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMINVALID, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimVerificationOngoing(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMVERIFICATIONONGOING, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getClaimChallengeTimeout(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMCHALLENGETIMEOUT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getClaimRemainingChallengers(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMREMAININGCHALLENGERS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSession(Bytes32 superblockHash, Address challenger) {
        final Function function = new Function(FUNC_GETSESSION, 
                Arrays.<Type>asList(superblockHash, challenger), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getClaimChallengers(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMCHALLENGERS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinClaimManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinClaimManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class DepositUnbondedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class SuperblockClaimCreatedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimChallengedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address challenger;
    }

    public static class SuperblockBattleDecidedEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Address winner;

        public Address loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimPendingEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimFailedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class VerificationGameStartedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;

        public Address challenger;

        public Bytes32 sessionId;
    }

    public static class ErrorClaimEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class DepositMadeEventResponse {
        public Log log;

        public Address who;

        public Uint256 amount;
    }

    public static class DepositWithdrawnEventResponse {
        public Log log;

        public Address who;

        public Uint256 amount;
    }
}
