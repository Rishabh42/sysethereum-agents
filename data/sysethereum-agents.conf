# Whether to enable Syscoin block submitter agent.
syscoin.superblock.submitter.enabled = true

# Whether to enable Syscoin block challenger agent.
syscoin.superblock.challenger.enabled = true

# local (when using syscoin regtest and eth ganache) or integration (when using syscoin mainnet and eth rinkeby)
constants = integration
# constants = local
# constants = ethganachesyscoinmain

# Minimum gas price used for all the txs
# Gas price is estimated by the ethereum node. If ethereum node estimate is below
# gas.price.min value, gas.price.min value will be used instead.
gas.price.min = 2000000000

# Gas limit used for all the txs
gas.limit = 1000000

# Address and unlocked account password used for sending/defending superblocks and contract calls that don't consume gas.
# Example:
general.purpose.and.send.superblocks.address = 0x55428beae5c33c37859f43d2c050a7f7ff1f20cc
general.purpose.and.send.superblocks.unlockpw = "abcd"

# Address and unlocking account password used for challenging invalid superblocks.
# Example:
syscoin.superblock.challenger.address = 0x55428beae5c33c37859f43d2c050a7f7ff1f20cc
syscoin.superblock.challenger.unlockpw = "abcd"

# Directory where sysethereum agents store syscoin blockchain.
# Example:
data.directory = /Users/jsidhu/Documents/GitHub/syscoin/src/qt/node1

# Syscoin RPC settings, you only need to worry about this if you are hosting the agent and accessing the REST API, set this to empty otherwise
# Example:
syscoinrpc.user = u
syscoinrpc.password = p
syscoinrpc.url_and_port = "http://localhost:8370/"

# Secondary HTTP provider for web3j to read superblock information, this should be a dedicated fullnode or something like Infura
# Example:
secondary.url = "https://rinkeby.infura.io/v3/d178aecf49154b12be98e68e998cfb8d"

# Whether to automatically withdraw funds after a battle is finished
withdraw.funds.enabled = true

# Upper bound for deposited funds; some will be withdrawn if they surpass this limit
deposited.funds.limit = 100